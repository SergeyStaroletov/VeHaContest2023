(in-package "ACL2")

(include-book "std/util/defrule" :dir :system)
(include-book "centaur/fty/top" :dir :system)
(include-book "std/util/bstar" :dir :system)
(include-book "std/typed-lists/top" :dir :system)
(include-book "std/lists/top" :dir :system)
(include-book "std/basic/inductions" :dir :system)

(include-book "element-equality")

(defrule
    integer-sum-rewrite
    (implies
        (and
            (integerp
                x
            )
            (integerp
                y
            )
        )
        (equal
            (ifix
                (+
                    x
                    y
                )
            )
            (+
                x
                y
            )
        )
    )
    :rule-classes
    :rewrite
)

(defrule
    integer-sum-minus-first-arg-rewrite
    (implies
        (and
            (integerp
                x
            )
            (integerp
                y
            )
        )
        (equal
            (ifix
                (+
                    (-
                        x
                    )
                    y
                )
            )
            (+
                (-
                    x
                )
                y
            )
        )
    )
    :rule-classes
    :rewrite
)

(defrule
    integer-sum-minus-second-arg-rewrite
    (implies
        (and
            (integerp
                x
            )
            (integerp
                y
            )
        )
        (equal
            (ifix
                (+
                    x
                    (-
                        y
                    )
                )
            )
            (+
                x
                (-
                    y
                )
            )
        )
    )
    :rule-classes
    :rewrite
)

(fty::defprod
    frame-1
    (
        (
            i
            integerp
        )
        (
            result
            integerp
        )
        (
            loop-break
            booleanp
        )
    )
)

(define
    frame-1-init
    (
        (
            i
            integerp
        )
        (
            result
            integerp
        )
    )
    :returns
    (
        fr
        frame-1-p
    )
    (make-frame-1
        :i
        i
        :result
        result
        :loop-break
        nil
    )
    ///
    (fty::deffixequiv
        frame-1-init
    )
)

(fty::defprod
    envir-1
    (
        (
            loop-counter-shift
            integerp
        )
        (
            a
            integer-listp
        )
    )
)

(define
    envir-1-init
    (
        (
            loop-counter-shift
            integerp
        )
        (
            a
            integer-listp
        )
    )
    :returns
    (
        env
        envir-1-p
    )
    (make-envir-1
        :loop-counter-shift
        loop-counter-shift
        :a
        a
    )
    ///
    (fty::deffixequiv
        envir-1-init
    )
)

(define
    rep-1
    (
        (
            iteration
            natp
        )
        (
            env-1
            envir-1-p
        )
        (
            fr-1
            frame-1-p
        )
    )
    :measure
    (
        nfix
        iteration
    )
    :verify-guards
    nil
    :returns
    (
        upd-fr-1
        frame-1-p
    )
    (b*
        (
            (
                iteration
                (
                    nfix
                    iteration
                )
            )
            (
                env-1
                (
                    envir-1-fix
                    env-1
                )
            )
            (
                fr-1
                (
                    frame-1-fix
                    fr-1
                )
            )
            (
                (when
                    (zp
                        iteration
                    )
                )
                fr-1
            )
            (
                fr-1
                (rep-1
                    (-
                        iteration
                        1
                    )
                    env-1
                    fr-1
                )
            )
            (
                (when
                    (
                        frame-1->loop-break
                        fr-1
                    )
                )
                fr-1
            )
            (
                fr-1
                (if
                    (not
                        (equal
                            (nth
                                (-
                                    (+
                                        (-
                                            iteration
                                            1
                                        )
                                        (
                                            envir-1->loop-counter-shift
                                            env-1
                                        )
                                    )
                                    1
                                )
                                (
                                    envir-1->a
                                    env-1
                                )
                            )
                            (nth
                                (+
                                    (-
                                        iteration
                                        1
                                    )
                                    (
                                        envir-1->loop-counter-shift
                                        env-1
                                    )
                                )
                                (
                                    envir-1->a
                                    env-1
                                )
                            )
                        )
                    )
                    (b*
                        (
                            (
                                fr-1
                                (change-frame-1
                                    fr-1
                                    :result
                                    0
                                )
                            )
                            (
                                fr-1
                                (change-frame-1
                                    fr-1
                                    :loop-break
                                    t
                                )
                            )
                            (
                                (when
                                    t
                                )
                                fr-1
                            )
                            (
                                (when
                                    (
                                        frame-1->loop-break
                                        fr-1
                                    )
                                )
                                fr-1
                            )
                        )
                        fr-1
                    )
                    fr-1
                )
            )
            (
                (when
                    (
                        frame-1->loop-break
                        fr-1
                    )
                )
                fr-1
            )
            (
                (when
                    (
                        frame-1->loop-break
                        fr-1
                    )
                )
                fr-1
            )
            (
                fr-1
                (change-frame-1
                    fr-1
                    :i
                    (+
                        (frame-1->i
                            fr-1
                        )
                        1
                    )
                )
            )
        )
        fr-1
    )
)
